Ports:
	Websocket:
		Real:
			8080
		Debug:
			8080 (Main)
			8081 (Reconnect testing)
	API Calls:
		Real:
			8080
		Debug:
			8082

CLOSE SERVERS WITH CTRL-C

Relevant Documentation:
	https://dev.twitch.tv/docs/authentication/scopes/
	


Todo:
	Send subscription events
	learn how to connect events to shit
	make a queue system
	etc
	
	
var StarterSubRequests : Array = [
	{
		"Name": "channel.follow",
		"Version": 2,
		"Type": "subscribe"
	},
	{
		"Name": "channel.subscribe",
		"Version": 1,
		"Type": "subscribe"
	},
	{
		"Name": "channel.subscription.gift",
		"Version": 1,
		"Type": "subscribe"
	},
	{
		"Name": "channel.subscription.message",
		"Version": 1,
		"Type": "subscribe"
	},
	{
		"Name": "channel.cheer",
		"Version": 1,
		"Type": "subscribe"
	},
	{
		"Name": "channel.raid",
		"Version": 1,
		"Type": "subscribe"
	},
	{
		"Name": "channel.channel_points_custom_reward_redemption.add",
		"Version": 1,
		"Type": "subscribe"
	},
	{
		"Name": "channel.poll.begin",
		"Version": 1,
		"Type": "subscribe"
	},
	{
		"Name": "channel.poll.progress",
		"Version": 1,
		"Type": "subscribe"
	},
	{
		"Name": "channel.poll.end",
		"Version": 1,
		"Type": "subscribe"
	},
	{
		"Name": "channel.prediction.begin",
		"Version": 1,
		"Type": "subscribe"
	},
	{
		"Name": "channel.prediction.end",
		"Version": 1,
		"Type": "subscribe"
	},
	{
		"Name": "channel.prediction.lock",
		"Version": 1,
		"Type": "subscribe"
	},
	{
		"Name": "channel.prediction.progress",
		"Version": 1,
		"Type": "subscribe"
	},
	{
		"Name": "channel.hype_train.begin",
		"Version": 1,
		"Type": "subscribe"
	},
	{
		"Name": "channel.hype_train.progress",
		"Version": 1,
		"Type": "subscribe"
	},
	{
		"Name": "channel.hype_train.end",
		"Version": 1,
		"Type": "subscribe"
	},
	{
		"Name": "channel.goal.begin",
		"Version": 1,
		"Type": "subscribe"
	},
	{
		"Name": "channel.goal.progress",
		"Version": 1,
		"Type": "subscribe"
	},
	{
		"Name": "channel.goal.end",
		"Version": 1,
		"Type": "subscribe"
	},
	{
		"Name": "channel.ban",
		"Version": 1,
		"Type": "subscribe"
	}
		]
In case you lost this.




12/9/2023

Hey future me. You're adding onto the queue system to add on the ability to send POST GET DELETE requests
by checking the dict value "Type".
You need to make a dictionary template for each and determine which gets used using the Type field.

When you want to get the list of subscribed events use the "query" Type.
	Query should look like this in the queue:
		{
		"Type": "query"
		}
	Query should be turned into a request like so:
		httpClient.request(HTTPClient.METHOD_GET,"/helix/eventsub/subscriptions",Headers)
		
		*Note that the BODY is NOT needed for this request. Just the headers we already defined.
This should also store the current subscriptions somewhere for later use. (mainly when we need to kill the subscriptions)

When you want to remove a subscription then use the "kill" Type.
	Kill should look like this in the queue:
		{
			"Type": "kill",
			"SubId": "SUBIDFROMSUBLISTGOESHERE"
		}
	The request it produces should look like this:
		httpClient.request(HTTPClient.METHOD_DELETE,str("helix/eventsub/subscriptions?id=",ID_GOES_HERE),Headers)
		At the time of writing this I'm not sure if the ID can be in the body, so for now just poke it into the URL.

When you want to subscribe to an event then use the "subscribe" Type.
	Subscribe should look like this in the queue:
		{
		"Name": "channel.goal.begin",
		"Version": 1,
		"Type": "subscribe"
		}
	The request sent out should look like this:
		httpClient.request(HTTPClient.METHOD_POST,"/helix/eventsub/subscriptions",Headers,str(QueueRequestBody))

Each time the queue is processed we need to check the type then run the appropriate code.
The Reconnect button in the OptionsWindow should add a kill request for every currently subscribed event,
wait until the queue is empty, then disconnect the httpClient, reset the queue with the starting queries,
then reconnect and run the processing loop again.

Every time you run httpClient.read_response_body_chunk it only grabs 1 chunk at a time.

JSON NOTIFICATION TEMPLATE
{
	"metadata": {
		"message_id": "593f1636-c44e-6c07-c748-e0a31dea3a09",
		"message_type": "notification",
		"message_timestamp": "2023-12-28T19:57:57.7953543Z",
		"subscription_type": "channel.follow",
		"subscription_version": "2"
	},
	"payload": {
		"subscription": {
			"id": "612c86da-576f-4b04-830e-f99080370d6a",
			"status": "enabled",
			"type": "channel.follow",
			"version": "2",
			"condition": {
				"broadcaster_user_id": "52023731",
				"moderator_user_id": "39394623"
			},
			"transport": {
				"method": "websocket",
				"session_id": "23afb7bb_e3c4f479"
			},
			"created_at": "2023-12-28T19:57:54.3910677Z",
			"cost": 0
		},
		"event": {
			"broadcaster_user_id": "52023731",
			"broadcaster_user_login": "52023731",
			"broadcaster_user_name": "testBroadcaster",
			"followed_at": "2023-12-28T19:57:57.7883549Z",
			"user_id": "39394623",
			"user_login": "testFromUser",
			"user_name": "testFromUser"
		}
	}
}

List of individual notifications

		"Name": "channel.follow",
		"Name": "channel.subscribe",
		"Name": "channel.subscription.gift",
		"Name": "channel.subscription.message",
		"Name": "channel.cheer",
		"Name": "channel.raid",
		"Name": "channel.channel_points_custom_reward_redemption.add",
		"Name": "channel.ban",
		
List of grouped notifications

		"Name": "channel.poll.begin",
		"Name": "channel.poll.progress",
		"Name": "channel.poll.end",
		"Name": "channel.prediction.begin",
		"Name": "channel.prediction.end",
		"Name": "channel.prediction.lock",
		"Name": "channel.prediction.progress",
		"Name": "channel.hype_train.begin",
		"Name": "channel.hype_train.progress",
		"Name": "channel.hype_train.end",
		"Name": "channel.goal.begin",
		"Name": "channel.goal.progress",
		"Name": "channel.goal.end",